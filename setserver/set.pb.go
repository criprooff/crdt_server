// Code generated by protoc-gen-go.
// source: set.proto
// DO NOT EDIT!

/*
Package SetServer is a generated protocol buffer package.

It is generated from these files:
	set.proto

It has these top-level messages:
	Item
	Response
*/
package SetServer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Response_ResponseType int32

const (
	Response_SUCCESS Response_ResponseType = 0
	Response_ERROR   Response_ResponseType = 1
)

var Response_ResponseType_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR",
}
var Response_ResponseType_value = map[string]int32{
	"SUCCESS": 0,
	"ERROR":   1,
}

func (x Response_ResponseType) String() string {
	return proto.EnumName(Response_ResponseType_name, int32(x))
}
func (Response_ResponseType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Item struct {
	Item string `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *Item) Reset()                    { *m = Item{} }
func (m *Item) String() string            { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()               {}
func (*Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Response struct {
	Type    Response_ResponseType `protobuf:"varint,1,opt,name=type,enum=SetServer.Response_ResponseType" json:"type,omitempty"`
	Present bool                  `protobuf:"varint,2,opt,name=present" json:"present,omitempty"`
	Error   string                `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Item)(nil), "SetServer.Item")
	proto.RegisterType((*Response)(nil), "SetServer.Response")
	proto.RegisterEnum("SetServer.Response_ResponseType", Response_ResponseType_name, Response_ResponseType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Set service

type SetClient interface {
	Add(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Response, error)
	Remove(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Response, error)
	Contains(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Response, error)
}

type setClient struct {
	cc *grpc.ClientConn
}

func NewSetClient(cc *grpc.ClientConn) SetClient {
	return &setClient{cc}
}

func (c *setClient) Add(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/SetServer.Set/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setClient) Remove(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/SetServer.Set/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *setClient) Contains(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/SetServer.Set/Contains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Set service

type SetServer interface {
	Add(context.Context, *Item) (*Response, error)
	Remove(context.Context, *Item) (*Response, error)
	Contains(context.Context, *Item) (*Response, error)
}

func RegisterSetServer(s *grpc.Server, srv SetServer) {
	s.RegisterService(&_Set_serviceDesc, srv)
}

func _Set_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SetServer).Add(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Set_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SetServer).Remove(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Set_Contains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SetServer).Contains(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Set_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SetServer.Set",
	HandlerType: (*SetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Set_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Set_Remove_Handler,
		},
		{
			MethodName: "Contains",
			Handler:    _Set_Contains_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x4e, 0x2d, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x0c, 0x4e, 0x2d, 0x09, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d,
	0x52, 0x12, 0xe1, 0x62, 0xf1, 0x2c, 0x49, 0xcd, 0x15, 0xe2, 0xe1, 0x62, 0xc9, 0x04, 0xd2, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x4a, 0x4d, 0x8c, 0x5c, 0x1c, 0x41, 0xa9, 0xc5, 0x05, 0xf9, 0x79,
	0xc5, 0xa9, 0x42, 0x7a, 0x5c, 0x2c, 0x25, 0x95, 0x05, 0xa9, 0x60, 0x29, 0x3e, 0x23, 0x05, 0x3d,
	0xb8, 0x66, 0x3d, 0x98, 0x12, 0x38, 0x23, 0x04, 0xa8, 0x4e, 0x88, 0x9f, 0x8b, 0xbd, 0xa0, 0x28,
	0xb5, 0x38, 0x35, 0xaf, 0x44, 0x82, 0x09, 0xa8, 0x85, 0x43, 0x88, 0x97, 0x8b, 0x35, 0xb5, 0xa8,
	0x28, 0xbf, 0x48, 0x82, 0x19, 0x6c, 0xb8, 0x1a, 0x17, 0x0f, 0x8a, 0x7a, 0x6e, 0x2e, 0xf6, 0xe0,
	0x50, 0x67, 0x67, 0xd7, 0xe0, 0x60, 0x01, 0x06, 0x21, 0x4e, 0x2e, 0x56, 0xd7, 0xa0, 0x20, 0xff,
	0x20, 0x01, 0x46, 0xa3, 0x59, 0x8c, 0x5c, 0xcc, 0x40, 0xbb, 0x84, 0x74, 0xb9, 0x98, 0x1d, 0x53,
	0x52, 0x84, 0xf8, 0x91, 0x2c, 0x06, 0x39, 0x59, 0x4a, 0x18, 0x8b, 0x4b, 0x94, 0x18, 0x84, 0x0c,
	0xb8, 0xd8, 0x82, 0x52, 0x73, 0xf3, 0xcb, 0x52, 0x89, 0xd6, 0x61, 0xc4, 0xc5, 0xe1, 0x9c, 0x9f,
	0x57, 0x92, 0x98, 0x99, 0x57, 0x4c, 0xac, 0x9e, 0x24, 0x36, 0x70, 0x48, 0x1a, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x51, 0x61, 0x58, 0x3f, 0x56, 0x01, 0x00, 0x00,
}
